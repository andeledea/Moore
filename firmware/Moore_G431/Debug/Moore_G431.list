
Moore_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005910  08005910  00006910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a54  08005a54  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a5c  08005a5c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08005ac0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005ac0  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001270d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  00019799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  0001cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e131  00000000  00000000  0001d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ea6  00000000  00000000  0003ba06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5851  00000000  00000000  0004e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001140fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  00114140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0011886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080058f8 	.word	0x080058f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	080058f8 	.word	0x080058f8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	// uart msg: axis, ena, dir, XXXXX, \0 -> 9 chars
	if (uart_buf != '\r') {
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <HAL_UART_RxCpltCallback+0x50>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b0d      	cmp	r3, #13
 8000516:	d00b      	beq.n	8000530 <HAL_UART_RxCpltCallback+0x28>
		uart_msg[msg_i] = uart_buf;
 8000518:	4b10      	ldr	r3, [pc, #64]	@ (800055c <HAL_UART_RxCpltCallback+0x54>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_UART_RxCpltCallback+0x50>)
 800051e:	7811      	ldrb	r1, [r2, #0]
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <HAL_UART_RxCpltCallback+0x58>)
 8000522:	54d1      	strb	r1, [r2, r3]
		msg_i++;
 8000524:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <HAL_UART_RxCpltCallback+0x54>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <HAL_UART_RxCpltCallback+0x54>)
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e00a      	b.n	8000546 <HAL_UART_RxCpltCallback+0x3e>
	} else {
		uart_msg[msg_i] = '\0';
 8000530:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_UART_RxCpltCallback+0x54>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <HAL_UART_RxCpltCallback+0x58>)
 8000536:	2100      	movs	r1, #0
 8000538:	54d1      	strb	r1, [r2, r3]

		setAxis(uart_msg);
 800053a:	4809      	ldr	r0, [pc, #36]	@ (8000560 <HAL_UART_RxCpltCallback+0x58>)
 800053c:	f000 f814 	bl	8000568 <setAxis>
		msg_i = 0;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <HAL_UART_RxCpltCallback+0x54>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&hlpuart1, &uart_buf, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	4903      	ldr	r1, [pc, #12]	@ (8000558 <HAL_UART_RxCpltCallback+0x50>)
 800054a:	4806      	ldr	r0, [pc, #24]	@ (8000564 <HAL_UART_RxCpltCallback+0x5c>)
 800054c:	f003 f9b8 	bl	80038c0 <HAL_UART_Receive_IT>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000154 	.word	0x20000154
 800055c:	20000164 	.word	0x20000164
 8000560:	20000158 	.word	0x20000158
 8000564:	20000078 	.word	0x20000078

08000568 <setAxis>:

void setAxis(const char * settings)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
	switch (settings[0]) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b7a      	cmp	r3, #122	@ 0x7a
 8000576:	d00e      	beq.n	8000596 <setAxis+0x2e>
 8000578:	2b7a      	cmp	r3, #122	@ 0x7a
 800057a:	dc10      	bgt.n	800059e <setAxis+0x36>
 800057c:	2b78      	cmp	r3, #120	@ 0x78
 800057e:	d002      	beq.n	8000586 <setAxis+0x1e>
 8000580:	2b79      	cmp	r3, #121	@ 0x79
 8000582:	d004      	beq.n	800058e <setAxis+0x26>
 8000584:	e00b      	b.n	800059e <setAxis+0x36>
	case 'x':
		axis = &xaxis;
 8000586:	4b32      	ldr	r3, [pc, #200]	@ (8000650 <setAxis+0xe8>)
 8000588:	4a32      	ldr	r2, [pc, #200]	@ (8000654 <setAxis+0xec>)
 800058a:	601a      	str	r2, [r3, #0]
		break;
 800058c:	e007      	b.n	800059e <setAxis+0x36>
	case 'y':
		axis = &yaxis;
 800058e:	4b30      	ldr	r3, [pc, #192]	@ (8000650 <setAxis+0xe8>)
 8000590:	4a31      	ldr	r2, [pc, #196]	@ (8000658 <setAxis+0xf0>)
 8000592:	601a      	str	r2, [r3, #0]
		break;
 8000594:	e003      	b.n	800059e <setAxis+0x36>
	case 'z':
		axis = &zaxis;
 8000596:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <setAxis+0xe8>)
 8000598:	4a30      	ldr	r2, [pc, #192]	@ (800065c <setAxis+0xf4>)
 800059a:	601a      	str	r2, [r3, #0]
		break;
 800059c:	bf00      	nop
	}

	if (settings[1] == 'd') HAL_GPIO_WritePin(axis->axisEnableGPIO, axis->axisEnablePin, GPIO_PIN_SET);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b64      	cmp	r3, #100	@ 0x64
 80005a6:	d109      	bne.n	80005bc <setAxis+0x54>
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <setAxis+0xe8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6898      	ldr	r0, [r3, #8]
 80005ae:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <setAxis+0xe8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	899b      	ldrh	r3, [r3, #12]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f001 f844 	bl	8001644 <HAL_GPIO_WritePin>
	if (settings[1] == 'e') HAL_GPIO_WritePin(axis->axisEnableGPIO, axis->axisEnablePin, GPIO_PIN_RESET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b65      	cmp	r3, #101	@ 0x65
 80005c4:	d109      	bne.n	80005da <setAxis+0x72>
 80005c6:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <setAxis+0xe8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6898      	ldr	r0, [r3, #8]
 80005cc:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <setAxis+0xe8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 f835 	bl	8001644 <HAL_GPIO_WritePin>

	if (settings[2] == 'b') HAL_GPIO_WritePin(axis->axisDirectionGPIO, axis->axisDirectionPin, GPIO_PIN_SET);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3302      	adds	r3, #2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b62      	cmp	r3, #98	@ 0x62
 80005e2:	d109      	bne.n	80005f8 <setAxis+0x90>
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <setAxis+0xe8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6918      	ldr	r0, [r3, #16]
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <setAxis+0xe8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	8a9b      	ldrh	r3, [r3, #20]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f001 f826 	bl	8001644 <HAL_GPIO_WritePin>
	if (settings[2] == 'f') HAL_GPIO_WritePin(axis->axisDirectionGPIO, axis->axisDirectionPin, GPIO_PIN_RESET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3302      	adds	r3, #2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b66      	cmp	r3, #102	@ 0x66
 8000600:	d109      	bne.n	8000616 <setAxis+0xae>
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <setAxis+0xe8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6918      	ldr	r0, [r3, #16]
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <setAxis+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	8a9b      	ldrh	r3, [r3, #20]
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	f001 f817 	bl	8001644 <HAL_GPIO_WritePin>


	uint16_t speed = atoi(settings + 3);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3303      	adds	r3, #3
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f8b2 	bl	8005784 <atoi>
 8000620:	4603      	mov	r3, r0
 8000622:	81fb      	strh	r3, [r7, #14]
	axis->T = map(speed, MINspeed, MAXspeed, axis->MINT, axis->MAXT);
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <setAxis+0xe8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	88da      	ldrh	r2, [r3, #6]
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <setAxis+0xe8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	4907      	ldr	r1, [pc, #28]	@ (8000650 <setAxis+0xe8>)
 8000632:	680c      	ldr	r4, [r1, #0]
 8000634:	89f8      	ldrh	r0, [r7, #14]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800063e:	2100      	movs	r1, #0
 8000640:	f000 f8b6 	bl	80007b0 <map>
 8000644:	4603      	mov	r3, r0
 8000646:	8063      	strh	r3, [r4, #2]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	200001b0 	.word	0x200001b0
 8000654:	20000168 	.word	0x20000168
 8000658:	20000180 	.word	0x20000180
 800065c:	20000198 	.word	0x20000198

08000660 <initAxis>:

void initAxis()
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	xaxis.axisN = Xaxis;
 8000664:	4b2f      	ldr	r3, [pc, #188]	@ (8000724 <initAxis+0xc4>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	xaxis.axisDirectionGPIO = Dir_X_GPIO_Port;
 800066a:	4b2e      	ldr	r3, [pc, #184]	@ (8000724 <initAxis+0xc4>)
 800066c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000670:	611a      	str	r2, [r3, #16]
	xaxis.axisDirectionPin = Dir_X_Pin;
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <initAxis+0xc4>)
 8000674:	2220      	movs	r2, #32
 8000676:	829a      	strh	r2, [r3, #20]
	xaxis.axisEnableGPIO = Ena_X_GPIO_Port;
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <initAxis+0xc4>)
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <initAxis+0xc8>)
 800067c:	609a      	str	r2, [r3, #8]
	xaxis.axisEnablePin = Ena_X_Pin;
 800067e:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <initAxis+0xc4>)
 8000680:	2210      	movs	r2, #16
 8000682:	819a      	strh	r2, [r3, #12]
	xaxis.setV = false;
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <initAxis+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	705a      	strb	r2, [r3, #1]
	xaxis.T = MAXTX;
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <initAxis+0xc4>)
 800068c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000690:	805a      	strh	r2, [r3, #2]
	xaxis.MAXT = MAXTX;
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <initAxis+0xc4>)
 8000694:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000698:	809a      	strh	r2, [r3, #4]
	xaxis.MINT = MINTX;
 800069a:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <initAxis+0xc4>)
 800069c:	22c8      	movs	r2, #200	@ 0xc8
 800069e:	80da      	strh	r2, [r3, #6]

	yaxis.axisN = Yaxis;
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <initAxis+0xcc>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
	yaxis.axisDirectionGPIO = Dir_Y_GPIO_Port;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <initAxis+0xcc>)
 80006a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ac:	611a      	str	r2, [r3, #16]
	yaxis.axisDirectionPin = Dir_Y_Pin;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <initAxis+0xcc>)
 80006b0:	2240      	movs	r2, #64	@ 0x40
 80006b2:	829a      	strh	r2, [r3, #20]
	yaxis.axisEnableGPIO = Ena_Y_GPIO_Port;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <initAxis+0xcc>)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <initAxis+0xc8>)
 80006b8:	609a      	str	r2, [r3, #8]
	yaxis.axisEnablePin = Ena_Y_Pin;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <initAxis+0xcc>)
 80006bc:	2220      	movs	r2, #32
 80006be:	819a      	strh	r2, [r3, #12]
	yaxis.setV = false;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <initAxis+0xcc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
	yaxis.T = MAXTY;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <initAxis+0xcc>)
 80006c8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80006cc:	805a      	strh	r2, [r3, #2]
	yaxis.MAXT = MAXTY;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <initAxis+0xcc>)
 80006d0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80006d4:	809a      	strh	r2, [r3, #4]
	yaxis.MINT = MINTY;
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <initAxis+0xcc>)
 80006d8:	22c8      	movs	r2, #200	@ 0xc8
 80006da:	80da      	strh	r2, [r3, #6]

	zaxis.axisN = Zaxis;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <initAxis+0xd0>)
 80006de:	2203      	movs	r2, #3
 80006e0:	701a      	strb	r2, [r3, #0]
	zaxis.axisDirectionGPIO = Dir_Z_GPIO_Port;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <initAxis+0xd0>)
 80006e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006e8:	611a      	str	r2, [r3, #16]
	zaxis.axisDirectionPin = Dir_Z_Pin;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <initAxis+0xd0>)
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	829a      	strh	r2, [r3, #20]
	zaxis.axisEnableGPIO = Ena_Z_GPIO_Port;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <initAxis+0xd0>)
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <initAxis+0xc8>)
 80006f4:	609a      	str	r2, [r3, #8]
	zaxis.axisEnablePin = Ena_Z_Pin;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <initAxis+0xd0>)
 80006f8:	2208      	movs	r2, #8
 80006fa:	819a      	strh	r2, [r3, #12]
	zaxis.setV = false;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <initAxis+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	705a      	strb	r2, [r3, #1]
	zaxis.T = MAXTZ;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <initAxis+0xd0>)
 8000704:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000708:	805a      	strh	r2, [r3, #2]
	zaxis.MAXT = MAXTZ;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <initAxis+0xd0>)
 800070c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000710:	809a      	strh	r2, [r3, #4]
	zaxis.MINT = MINTZ;
 8000712:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <initAxis+0xd0>)
 8000714:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000718:	80da      	strh	r2, [r3, #6]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	20000168 	.word	0x20000168
 8000728:	48000400 	.word	0x48000400
 800072c:	20000180 	.word	0x20000180
 8000730:	20000198 	.word	0x20000198

08000734 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7f1b      	ldrb	r3, [r3, #28]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d10a      	bne.n	800075a <HAL_TIM_OC_DelayElapsedCallback+0x26>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_2) + xaxis.T);
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800074c:	885b      	ldrh	r3, [r3, #2]
 800074e:	4619      	mov	r1, r3
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	440a      	add	r2, r1
 8000756:	639a      	str	r2, [r3, #56]	@ 0x38
	else if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1)
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1) + yaxis.T);

	else if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3)
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_3) + zaxis.T);
}
 8000758:	e01c      	b.n	8000794 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	else if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7f1b      	ldrb	r3, [r3, #28]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d10a      	bne.n	8000778 <HAL_TIM_OC_DelayElapsedCallback+0x44>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1) + yaxis.T);
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	4619      	mov	r1, r3
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	440a      	add	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000776:	e00d      	b.n	8000794 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	else if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7f1b      	ldrb	r3, [r3, #28]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d109      	bne.n	8000794 <HAL_TIM_OC_DelayElapsedCallback+0x60>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_3) + zaxis.T);
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000788:	885b      	ldrh	r3, [r3, #2]
 800078a:	4619      	mov	r1, r3
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	440a      	add	r2, r1
 8000792:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000108 	.word	0x20000108
 80007a4:	20000168 	.word	0x20000168
 80007a8:	20000180 	.word	0x20000180
 80007ac:	20000198 	.word	0x20000198

080007b0 <map>:

uint16_t map(uint16_t x, uint16_t v_min, uint16_t v_max, uint16_t t_min, uint16_t t_max)
{
 80007b0:	b490      	push	{r4, r7}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	4603      	mov	r3, r0
 80007c4:	80bb      	strh	r3, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	807b      	strh	r3, [r7, #2]
 80007ca:	4613      	mov	r3, r2
 80007cc:	803b      	strh	r3, [r7, #0]
	return t_max/((x - v_min) * (t_max/t_min - 1) / (v_max - v_min) + 1);
 80007ce:	8a3a      	ldrh	r2, [r7, #16]
 80007d0:	88f9      	ldrh	r1, [r7, #6]
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	1acb      	subs	r3, r1, r3
 80007d6:	8a38      	ldrh	r0, [r7, #16]
 80007d8:	8839      	ldrh	r1, [r7, #0]
 80007da:	fbb0 f1f1 	udiv	r1, r0, r1
 80007de:	b289      	uxth	r1, r1
 80007e0:	3901      	subs	r1, #1
 80007e2:	fb03 f101 	mul.w	r1, r3, r1
 80007e6:	8878      	ldrh	r0, [r7, #2]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	1ac3      	subs	r3, r0, r3
 80007ec:	fb91 f3f3 	sdiv	r3, r1, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80007f6:	b29b      	uxth	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc90      	pop	{r4, r7}
 8000800:	4770      	bx	lr
	...

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initAxis();
 8000808:	f7ff ff2a 	bl	8000660 <initAxis>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fb57 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f820 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f960 	bl	8000ad8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000818:	f000 f868 	bl	80008ec <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800081c:	f000 f8b0 	bl	8000980 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1); // start counting
 8000820:	2100      	movs	r1, #0
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <main+0x44>)
 8000824:	f001 ff7a 	bl	800271c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2); // start counting
 8000828:	2104      	movs	r1, #4
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <main+0x44>)
 800082c:	f001 ff76 	bl	800271c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3); // start counting
 8000830:	2108      	movs	r1, #8
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <main+0x44>)
 8000834:	f001 ff72 	bl	800271c <HAL_TIM_OC_Start_IT>
  HAL_UART_Receive_IT(&hlpuart1, &uart_buf, 1); //start sensing
 8000838:	2201      	movs	r2, #1
 800083a:	4904      	ldr	r1, [pc, #16]	@ (800084c <main+0x48>)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <main+0x4c>)
 800083e:	f003 f83f 	bl	80038c0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <main+0x3e>
 8000846:	bf00      	nop
 8000848:	20000108 	.word	0x20000108
 800084c:	20000154 	.word	0x20000154
 8000850:	20000078 	.word	0x20000078

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	@ 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	2238      	movs	r2, #56	@ 0x38
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 f816 	bl	8005894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 ff20 	bl	80016bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000892:	2304      	movs	r3, #4
 8000894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000896:	2355      	movs	r3, #85	@ 0x55
 8000898:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 ffba 	bl	8001824 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008b6:	f000 f993 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2104      	movs	r1, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fabe 	bl	8001e54 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008de:	f000 f97f 	bl	8000be0 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	@ 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 80008f2:	4a22      	ldr	r2, [pc, #136]	@ (800097c <MX_LPUART1_UART_Init+0x90>)
 80008f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 80008f8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80008fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000930:	f002 ff76 	bl	8003820 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f951 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000942:	f004 fe54 	bl	80055ee <HAL_UARTEx_SetTxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800094c:	f000 f948 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000954:	f004 fe89 	bl	800566a <HAL_UARTEx_SetRxFifoThreshold>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800095e:	f000 f93f 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_LPUART1_UART_Init+0x8c>)
 8000964:	f004 fe08 	bl	8005578 <HAL_UARTEx_EnableFifoMode>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800096e:	f000 f937 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000078 	.word	0x20000078
 800097c:	40008000 	.word	0x40008000

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b098      	sub	sp, #96	@ 0x60
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000992:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2234      	movs	r2, #52	@ 0x34
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 ff71 	bl	8005894 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009b4:	4a47      	ldr	r2, [pc, #284]	@ (8000ad4 <MX_TIM1_Init+0x154>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC - 1;
 80009b8:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009ba:	220f      	movs	r2, #15
 80009bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b44      	ldr	r3, [pc, #272]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c4:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009de:	483c      	ldr	r0, [pc, #240]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009e0:	f001 fe44 	bl	800266c <HAL_TIM_OC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f8f9 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009fe:	4619      	mov	r1, r3
 8000a00:	4833      	ldr	r0, [pc, #204]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a02:	f002 fda5 	bl	8003550 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 f8e8 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a10:	2330      	movs	r3, #48	@ 0x30
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4826      	ldr	r0, [pc, #152]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a36:	f002 f93d 	bl	8002cb4 <HAL_TIM_OC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a40:	f000 f8ce 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a4e:	f002 f931 	bl	8002cb4 <HAL_TIM_OC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a58:	f000 f8c2 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a60:	2208      	movs	r2, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	481a      	ldr	r0, [pc, #104]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a66:	f002 f925 	bl	8002cb4 <HAL_TIM_OC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000a70:	f000 f8b6 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000ab2:	f002 fdcf 	bl	8003654 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000abc:	f000 f890 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000ac2:	f000 f93d 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3760      	adds	r7, #96	@ 0x60
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000108 	.word	0x20000108
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a38      	ldr	r2, [pc, #224]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b36      	ldr	r3, [pc, #216]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a32      	ldr	r2, [pc, #200]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b30      	ldr	r3, [pc, #192]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a26      	ldr	r2, [pc, #152]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Dir_X_Pin|Dir_Y_Pin|Dir_Z_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	21e0      	movs	r1, #224	@ 0xe0
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f000 fd75 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ena_Z_Pin|Ena_X_Pin|Ena_Y_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2138      	movs	r1, #56	@ 0x38
 8000b5e:	481e      	ldr	r0, [pc, #120]	@ (8000bd8 <MX_GPIO_Init+0x100>)
 8000b60:	f000 fd70 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4818      	ldr	r0, [pc, #96]	@ (8000bdc <MX_GPIO_Init+0x104>)
 8000b7c:	f000 fbe0 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_X_Pin Dir_Y_Pin Dir_Z_Pin */
  GPIO_InitStruct.Pin = Dir_X_Pin|Dir_Y_Pin|Dir_Z_Pin;
 8000b80:	23e0      	movs	r3, #224	@ 0xe0
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b84:	2311      	movs	r3, #17
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f000 fbd1 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ena_Z_Pin Ena_X_Pin Ena_Y_Pin */
  GPIO_InitStruct.Pin = Ena_Z_Pin|Ena_X_Pin|Ena_Y_Pin;
 8000b9e:	2338      	movs	r3, #56	@ 0x38
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ba2:	2311      	movs	r3, #17
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <MX_GPIO_Init+0x100>)
 8000bb6:	f000 fbc3 	bl	8001340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2028      	movs	r0, #40	@ 0x28
 8000bc0:	f000 fac9 	bl	8001156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f000 fae0 	bl	800118a <HAL_NVIC_EnableIRQ>

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	@ 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c22:	f000 fdef 	bl	8001804 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b09a      	sub	sp, #104	@ 0x68
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2244      	movs	r2, #68	@ 0x44
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 fe1d 	bl	8005894 <memset>
  if(huart->Instance==LPUART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <HAL_UART_MspInit+0xb8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d13e      	bne.n	8000ce2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c64:	2320      	movs	r3, #32
 8000c66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fb0b 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff ffb0 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c84:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_UART_MspInit+0xbc>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cce:	f000 fb37 	bl	8001340 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	205b      	movs	r0, #91	@ 0x5b
 8000cd8:	f000 fa3d 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cdc:	205b      	movs	r0, #91	@ 0x5b
 8000cde:	f000 fa54 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3768      	adds	r7, #104	@ 0x68
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40008000 	.word	0x40008000
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <HAL_TIM_OC_MspInit+0x44>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d113      	bne.n	8000d2e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_TIM_OC_MspInit+0x48>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <HAL_TIM_OC_MspInit+0x48>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_TIM_OC_MspInit+0x48>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	201b      	movs	r0, #27
 8000d24:	f000 fa17 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d28:	201b      	movs	r0, #27
 8000d2a:	f000 fa2e 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d11d      	bne.n	8000d9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = wave_Y_Pin|wave_X_Pin|wave_Z_Pin;
 8000d7a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 fad1 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012c00 	.word	0x40012c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8ad 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <TIM1_CC_IRQHandler+0x10>)
 8000e16:	f001 fdcd 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000108 	.word	0x20000108

08000e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e2c:	f000 fc22 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <LPUART1_IRQHandler+0x10>)
 8000e3a:	f002 fd97 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000078 	.word	0x20000078

08000e48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e6c:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490e      	ldr	r1, [pc, #56]	@ (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0b      	ldr	r4, [pc, #44]	@ (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e96:	f7ff ffd7 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f004 fd09 	bl	80058b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fcb1 	bl	8000804 <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   r0, =_estack
 8000ea4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eb0:	08005a64 	.word	0x08005a64
  ldr r2, =_sbss
 8000eb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb8:	200002f0 	.word	0x200002f0

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>

08000ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f939 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f80e 	bl	8000ef0 <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee0:	f7ff fe84 	bl	8000bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_InitTick+0x68>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d022      	beq.n	8000f4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_InitTick+0x6c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_InitTick+0x68>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f944 	bl	80011a6 <HAL_SYSTICK_Config>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10f      	bne.n	8000f44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	d809      	bhi.n	8000f3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f32:	f000 f910 	bl	8001156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_InitTick+0x70>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e004      	b.n	8000f4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e001      	b.n	8000f4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a03      	ldr	r2, [pc, #12]	@ (8000f80 <HAL_IncTick+0x1c>)
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	200001b4 	.word	0x200001b4
 8000f84:	20000008 	.word	0x20000008

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001b4 	.word	0x200001b4

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff40 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff33 	bl	8001004 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa4 	bl	80010fc <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d005      	beq.n	80011e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2204      	movs	r2, #4
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e037      	b.n	8001252 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 020e 	bic.w	r2, r2, #14
 80011f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001200:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f003 021f 	and.w	r2, r3, #31
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800122e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001242:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001246:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001250:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d00d      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e047      	b.n	8001334 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001308:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001312:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
    }
  }
  return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800134e:	e15a      	b.n	8001606 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 814c 	beq.w	8001600 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800137c:	2b02      	cmp	r3, #2
 800137e:	d130      	bne.n	80013e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b6:	2201      	movs	r2, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 0201 	and.w	r2, r3, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d017      	beq.n	800141e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d123      	bne.n	8001472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0203 	and.w	r2, r3, #3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a6 	beq.w	8001600 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <HAL_GPIO_Init+0x2e4>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001624 <HAL_GPIO_Init+0x2e4>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c0:	4b58      	ldr	r3, [pc, #352]	@ (8001624 <HAL_GPIO_Init+0x2e4>)
 80014c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014cc:	4a56      	ldr	r2, [pc, #344]	@ (8001628 <HAL_GPIO_Init+0x2e8>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014f6:	d01f      	beq.n	8001538 <HAL_GPIO_Init+0x1f8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4c      	ldr	r2, [pc, #304]	@ (800162c <HAL_GPIO_Init+0x2ec>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d019      	beq.n	8001534 <HAL_GPIO_Init+0x1f4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4b      	ldr	r2, [pc, #300]	@ (8001630 <HAL_GPIO_Init+0x2f0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x1f0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a4a      	ldr	r2, [pc, #296]	@ (8001634 <HAL_GPIO_Init+0x2f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a49      	ldr	r2, [pc, #292]	@ (8001638 <HAL_GPIO_Init+0x2f8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1e8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a48      	ldr	r2, [pc, #288]	@ (800163c <HAL_GPIO_Init+0x2fc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1e4>
 8001520:	2305      	movs	r3, #5
 8001522:	e00a      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 8001524:	2306      	movs	r3, #6
 8001526:	e008      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 8001528:	2304      	movs	r3, #4
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 800152c:	2303      	movs	r3, #3
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1fa>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	@ (8001628 <HAL_GPIO_Init+0x2e8>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001558:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <HAL_GPIO_Init+0x300>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157c:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <HAL_GPIO_Init+0x300>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_GPIO_Init+0x300>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a6:	4a26      	ldr	r2, [pc, #152]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f ae9d 	bne.w	8001350 <HAL_GPIO_Init+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00
 8001638:	48001000 	.word	0x48001000
 800163c:	48001400 	.word	0x48001400
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001660:	e002      	b.n	8001668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f806 	bl	80016a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d141      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ca:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d6:	d131      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016de:	4a46      	ldr	r2, [pc, #280]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	4b43      	ldr	r3, [pc, #268]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016f0:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f8:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2232      	movs	r2, #50	@ 0x32
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9b      	lsrs	r3, r3, #18
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170e:	e002      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3b01      	subs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001722:	d102      	bne.n	800172a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f2      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001736:	d158      	bne.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e057      	b.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800173c:	4b2e      	ldr	r3, [pc, #184]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001742:	4a2d      	ldr	r2, [pc, #180]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800174c:	e04d      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001754:	d141      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001762:	d131      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800177c:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2232      	movs	r2, #50	@ 0x32
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9b      	lsrs	r3, r3, #18
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179a:	e002      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ae:	d102      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f2      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c2:	d112      	bne.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e011      	b.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017d8:	e007      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40007000 	.word	0x40007000
 80017fc:	20000000 	.word	0x20000000
 8001800:	431bde83 	.word	0x431bde83

08001804 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001812:	6093      	str	r3, [r2, #8]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e306      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d075      	beq.n	800192e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001842:	4b97      	ldr	r3, [pc, #604]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d102      	bne.n	8001862 <HAL_RCC_OscConfig+0x3e>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d002      	beq.n	8001868 <HAL_RCC_OscConfig+0x44>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05b      	beq.n	800192c <HAL_RCC_OscConfig+0x108>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d157      	bne.n	800192c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e2e1      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x74>
 800188a:	4b85      	ldr	r3, [pc, #532]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a84      	ldr	r2, [pc, #528]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xb0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x98>
 80018a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xb0>
 80018bc:	4b78      	ldr	r3, [pc, #480]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b75      	ldr	r3, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a74      	ldr	r2, [pc, #464]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb54 	bl	8000f88 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb50 	bl	8000f88 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2a6      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xc0>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fb40 	bl	8000f88 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fb3c 	bl	8000f88 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e292      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191e:	4b60      	ldr	r3, [pc, #384]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0xe8>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d075      	beq.n	8001a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193a:	4b59      	ldr	r3, [pc, #356]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001944:	4b56      	ldr	r3, [pc, #344]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0x136>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d002      	beq.n	8001960 <HAL_RCC_OscConfig+0x13c>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d11f      	bne.n	80019a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x154>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e265      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b49      	ldr	r3, [pc, #292]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	4946      	ldr	r1, [pc, #280]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800198c:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <HAL_RCC_OscConfig+0x280>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff faad 	bl	8000ef0 <HAL_InitTick>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d043      	beq.n	8001a24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e251      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fae8 	bl	8000f88 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019bc:	f7ff fae4 	bl	8000f88 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e23a      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ce:	4b34      	ldr	r3, [pc, #208]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b31      	ldr	r3, [pc, #196]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	061b      	lsls	r3, r3, #24
 80019e8:	492d      	ldr	r1, [pc, #180]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
 80019ee:	e01a      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fac4 	bl	8000f88 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fac0 	bl	8000f88 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e216      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d041      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a40:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa9d 	bl	8000f88 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa99 	bl	8000f88 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1ef      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0ef      	beq.n	8001a52 <HAL_RCC_OscConfig+0x22e>
 8001a72:	e020      	b.n	8001ab6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa80 	bl	8000f88 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8a:	e00d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fa7c 	bl	8000f88 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d906      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1d2      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ea      	bne.n	8001a8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ac8:	4b84      	ldr	r3, [pc, #528]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2b4>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x2b6>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00d      	beq.n	8001afa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b7f      	ldr	r3, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aea:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afa:	4b79      	ldr	r3, [pc, #484]	@ (8001ce0 <HAL_RCC_OscConfig+0x4bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b06:	4b76      	ldr	r3, [pc, #472]	@ (8001ce0 <HAL_RCC_OscConfig+0x4bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ce0 <HAL_RCC_OscConfig+0x4bc>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa39 	bl	8000f88 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff fa35 	bl	8000f88 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e18b      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce0 <HAL_RCC_OscConfig+0x4bc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_OscConfig+0x32e>
 8001b40:	4b66      	ldr	r3, [pc, #408]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b50:	e024      	b.n	8001b9c <HAL_RCC_OscConfig+0x378>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d110      	bne.n	8001b7c <HAL_RCC_OscConfig+0x358>
 8001b5a:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b60:	4a5e      	ldr	r2, [pc, #376]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b70:	4a5a      	ldr	r2, [pc, #360]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7a:	e00f      	b.n	8001b9c <HAL_RCC_OscConfig+0x378>
 8001b7c:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8c:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f9f0 	bl	8000f88 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9ec 	bl	8000f88 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e140      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ed      	beq.n	8001bac <HAL_RCC_OscConfig+0x388>
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f9d9 	bl	8000f88 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9d5 	bl	8000f88 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e129      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ed      	bne.n	8001bda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b35      	ldr	r3, [pc, #212]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f9a8 	bl	8000f88 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff f9a4 	bl	8000f88 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0fa      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x418>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c64:	4a1d      	ldr	r2, [pc, #116]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f98b 	bl	8000f88 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff f987 	bl	8000f88 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0dd      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80d1 	beq.w	8001e42 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	f000 808b 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d15e      	bne.n	8001d74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a08      	ldr	r2, [pc, #32]	@ (8001cdc <HAL_RCC_OscConfig+0x4b8>)
 8001cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f961 	bl	8000f88 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	e00c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff f95d 	bl	8000f88 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d905      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0b3      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ec      	bne.n	8001cca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b56      	ldr	r3, [pc, #344]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4b56      	ldr	r3, [pc, #344]	@ (8001e50 <HAL_RCC_OscConfig+0x62c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a11      	ldr	r1, [r2, #32]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d00:	3a01      	subs	r2, #1
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d0a:	0212      	lsls	r2, r2, #8
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0552      	lsls	r2, r2, #21
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d1e:	0852      	lsrs	r2, r2, #1
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0652      	lsls	r2, r2, #25
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d2a:	06d2      	lsls	r2, r2, #27
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4947      	ldr	r1, [pc, #284]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b45      	ldr	r3, [pc, #276]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a44      	ldr	r2, [pc, #272]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d40:	4b42      	ldr	r3, [pc, #264]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a41      	ldr	r2, [pc, #260]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f91c 	bl	8000f88 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f918 	bl	8000f88 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e06e      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x530>
 8001d72:	e066      	b.n	8001e42 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a34      	ldr	r2, [pc, #208]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d80:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a31      	ldr	r2, [pc, #196]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d92:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f8f4 	bl	8000f88 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f8f0 	bl	8000f88 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e046      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x580>
 8001dc2:	e03e      	b.n	8001e42 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e039      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d12c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	3b01      	subs	r3, #1
 8001df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d123      	bne.n	8001e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11b      	bne.n	8001e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d113      	bne.n	8001e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	3b01      	subs	r3, #1
 8001e38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	019f800c 	.word	0x019f800c

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e11e      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b91      	ldr	r3, [pc, #580]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d910      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 020f 	bic.w	r2, r3, #15
 8001e82:	498c      	ldr	r1, [pc, #560]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e106      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d073      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d129      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb0:	4b81      	ldr	r3, [pc, #516]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0f4      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ec0:	f000 f99e 	bl	8002200 <RCC_GetSysClockFreqFromPLLSource>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80020bc <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d93f      	bls.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ece:	4b7a      	ldr	r3, [pc, #488]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d033      	beq.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d12f      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eee:	4b72      	ldr	r3, [pc, #456]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ef6:	4a70      	ldr	r2, [pc, #448]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e024      	b.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0c6      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1c:	4b66      	ldr	r3, [pc, #408]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0be      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f2c:	f000 f8ce 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4a61      	ldr	r2, [pc, #388]	@ (80020bc <HAL_RCC_ClockConfig+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d909      	bls.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f42:	4a5d      	ldr	r2, [pc, #372]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4957      	ldr	r1, [pc, #348]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7ff f812 	bl	8000f88 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7ff f80e 	bl	8000f88 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e095      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d023      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4936      	ldr	r1, [pc, #216]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b80      	cmp	r3, #128	@ 0x80
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fea:	4b33      	ldr	r3, [pc, #204]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4a32      	ldr	r2, [pc, #200]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8001ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d21d      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002004:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 020f 	bic.w	r2, r3, #15
 800200c:	4929      	ldr	r1, [pc, #164]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002014:	f7fe ffb8 	bl	8000f88 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe ffb4 	bl	8000f88 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e03b      	b.n	80020aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_RCC_ClockConfig+0x260>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d1ed      	bne.n	800201c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490f      	ldr	r1, [pc, #60]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207e:	f000 f825 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCC_ClockConfig+0x264>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <HAL_RCC_ClockConfig+0x26c>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x270>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_ClockConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ff24 	bl	8000ef0 <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	04c4b400 	.word	0x04c4b400
 80020c0:	08005910 	.word	0x08005910
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020de:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e047      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020e4:	4b27      	ldr	r3, [pc, #156]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e03e      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d136      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3301      	adds	r3, #1
 8002118:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d10c      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002120:	4a1a      	ldr	r2, [pc, #104]	@ (800218c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212a:	68d2      	ldr	r2, [r2, #12]
 800212c:	0a12      	lsrs	r2, r2, #8
 800212e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
      break;
 8002138:	e00c      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800213a:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002144:	68d2      	ldr	r2, [r2, #12]
 8002146:	0a12      	lsrs	r2, r2, #8
 8002148:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
      break;
 8002152:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0e5b      	lsrs	r3, r3, #25
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	3301      	adds	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	e001      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002174:	693b      	ldr	r3, [r7, #16]
}
 8002176:	4618      	mov	r0, r3
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	00f42400 	.word	0x00f42400
 800218c:	016e3600 	.word	0x016e3600

08002190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021ac:	f7ff fff0 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4904      	ldr	r1, [pc, #16]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08005920 	.word	0x08005920

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d8:	f7ff ffda 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0adb      	lsrs	r3, r3, #11
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08005920 	.word	0x08005920

08002200 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002206:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d10c      	bne.n	800223e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	4a14      	ldr	r2, [pc, #80]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222e:	68d2      	ldr	r2, [r2, #12]
 8002230:	0a12      	lsrs	r2, r2, #8
 8002232:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
    break;
 800223c:	e00c      	b.n	8002258 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4a0e      	ldr	r2, [pc, #56]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	0a12      	lsrs	r2, r2, #8
 800224c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    break;
 8002256:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0e5b      	lsrs	r3, r3, #25
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40021000 	.word	0x40021000
 8002284:	016e3600 	.word	0x016e3600
 8002288:	00f42400 	.word	0x00f42400

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002294:	2300      	movs	r3, #0
 8002296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002298:	2300      	movs	r3, #0
 800229a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8098 	beq.w	80023da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b43      	ldr	r3, [pc, #268]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	4a3f      	ldr	r2, [pc, #252]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c6:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d2:	2301      	movs	r3, #1
 80022d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d6:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a39      	ldr	r2, [pc, #228]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e2:	f7fe fe51 	bl	8000f88 <HAL_GetTick>
 80022e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e8:	e009      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe fe4d 	bl	8000f88 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d902      	bls.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	74fb      	strb	r3, [r7, #19]
        break;
 80022fc:	e005      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fe:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ef      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d159      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002310:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800231a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01e      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	d019      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800232c:	4b23      	ldr	r3, [pc, #140]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233e:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002348:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	4a1b      	ldr	r2, [pc, #108]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002358:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fe0d 	bl	8000f88 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002370:	e00b      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fe09 	bl	8000f88 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d902      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	74fb      	strb	r3, [r7, #19]
            break;
 8002388:	e006      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ec      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	4903      	ldr	r1, [pc, #12]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023b4:	e008      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
 80023ba:	e005      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c8:	7c7b      	ldrb	r3, [r7, #17]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4ba6      	ldr	r3, [pc, #664]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4aa5      	ldr	r2, [pc, #660]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	499c      	ldr	r1, [pc, #624]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002408:	4b97      	ldr	r3, [pc, #604]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f023 020c 	bic.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4994      	ldr	r1, [pc, #592]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800242a:	4b8f      	ldr	r3, [pc, #572]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	498b      	ldr	r1, [pc, #556]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800244c:	4b86      	ldr	r3, [pc, #536]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4983      	ldr	r1, [pc, #524]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800246e:	4b7e      	ldr	r3, [pc, #504]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	497a      	ldr	r1, [pc, #488]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002490:	4b75      	ldr	r3, [pc, #468]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4972      	ldr	r1, [pc, #456]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4969      	ldr	r1, [pc, #420]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d4:	4b64      	ldr	r3, [pc, #400]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4961      	ldr	r1, [pc, #388]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	4958      	ldr	r1, [pc, #352]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	4950      	ldr	r1, [pc, #320]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a4a      	ldr	r2, [pc, #296]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002550:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002556:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	4942      	ldr	r1, [pc, #264]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a3c      	ldr	r2, [pc, #240]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002588:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4934      	ldr	r1, [pc, #208]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	4926      	ldr	r1, [pc, #152]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	4918      	ldr	r1, [pc, #96]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002622:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263e:	490a      	ldr	r1, [pc, #40]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800265c:	7cbb      	ldrb	r3, [r7, #18]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e049      	b.n	8002712 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fb2e 	bl	8000cf4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fba4 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_TIM_OC_Start_IT+0x28>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e03c      	b.n	80027be <HAL_TIM_OC_Start_IT+0xa2>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d109      	bne.n	800275e <HAL_TIM_OC_Start_IT+0x42>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e02f      	b.n	80027be <HAL_TIM_OC_Start_IT+0xa2>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d109      	bne.n	8002778 <HAL_TIM_OC_Start_IT+0x5c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e022      	b.n	80027be <HAL_TIM_OC_Start_IT+0xa2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d109      	bne.n	8002792 <HAL_TIM_OC_Start_IT+0x76>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e015      	b.n	80027be <HAL_TIM_OC_Start_IT+0xa2>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b10      	cmp	r3, #16
 8002796:	d109      	bne.n	80027ac <HAL_TIM_OC_Start_IT+0x90>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e008      	b.n	80027be <HAL_TIM_OC_Start_IT+0xa2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0e2      	b.n	800298c <HAL_TIM_OC_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_OC_Start_IT+0xba>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d4:	e023      	b.n	800281e <HAL_TIM_OC_Start_IT+0x102>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_OC_Start_IT+0xca>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e4:	e01b      	b.n	800281e <HAL_TIM_OC_Start_IT+0x102>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_OC_Start_IT+0xda>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f4:	e013      	b.n	800281e <HAL_TIM_OC_Start_IT+0x102>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_OC_Start_IT+0xea>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002804:	e00b      	b.n	800281e <HAL_TIM_OC_Start_IT+0x102>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b10      	cmp	r3, #16
 800280a:	d104      	bne.n	8002816 <HAL_TIM_OC_Start_IT+0xfa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002814:	e003      	b.n	800281e <HAL_TIM_OC_Start_IT+0x102>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d841      	bhi.n	80028a8 <HAL_TIM_OC_Start_IT+0x18c>
 8002824:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <HAL_TIM_OC_Start_IT+0x110>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002861 	.word	0x08002861
 8002830:	080028a9 	.word	0x080028a9
 8002834:	080028a9 	.word	0x080028a9
 8002838:	080028a9 	.word	0x080028a9
 800283c:	08002873 	.word	0x08002873
 8002840:	080028a9 	.word	0x080028a9
 8002844:	080028a9 	.word	0x080028a9
 8002848:	080028a9 	.word	0x080028a9
 800284c:	08002885 	.word	0x08002885
 8002850:	080028a9 	.word	0x080028a9
 8002854:	080028a9 	.word	0x080028a9
 8002858:	080028a9 	.word	0x080028a9
 800285c:	08002897 	.word	0x08002897
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0202 	orr.w	r2, r2, #2
 800286e:	60da      	str	r2, [r3, #12]
      break;
 8002870:	e01d      	b.n	80028ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0204 	orr.w	r2, r2, #4
 8002880:	60da      	str	r2, [r3, #12]
      break;
 8002882:	e014      	b.n	80028ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	60da      	str	r2, [r3, #12]
      break;
 8002894:	e00b      	b.n	80028ae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0210 	orr.w	r2, r2, #16
 80028a4:	60da      	str	r2, [r3, #12]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d16a      	bne.n	800298a <HAL_TIM_OC_Start_IT+0x26e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fe21 	bl	8003504 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a33      	ldr	r2, [pc, #204]	@ (8002994 <HAL_TIM_OC_Start_IT+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_TIM_OC_Start_IT+0x1d8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a31      	ldr	r2, [pc, #196]	@ (8002998 <HAL_TIM_OC_Start_IT+0x27c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_TIM_OC_Start_IT+0x1d8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a30      	ldr	r2, [pc, #192]	@ (800299c <HAL_TIM_OC_Start_IT+0x280>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_TIM_OC_Start_IT+0x1d8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2e      	ldr	r2, [pc, #184]	@ (80029a0 <HAL_TIM_OC_Start_IT+0x284>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_OC_Start_IT+0x1d8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <HAL_TIM_OC_Start_IT+0x288>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_OC_Start_IT+0x1dc>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_TIM_OC_Start_IT+0x1de>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <HAL_TIM_OC_Start_IT+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d018      	beq.n	800294a <HAL_TIM_OC_Start_IT+0x22e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002920:	d013      	beq.n	800294a <HAL_TIM_OC_Start_IT+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a20      	ldr	r2, [pc, #128]	@ (80029a8 <HAL_TIM_OC_Start_IT+0x28c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_TIM_OC_Start_IT+0x22e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <HAL_TIM_OC_Start_IT+0x290>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_TIM_OC_Start_IT+0x22e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a17      	ldr	r2, [pc, #92]	@ (8002998 <HAL_TIM_OC_Start_IT+0x27c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_TIM_OC_Start_IT+0x22e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <HAL_TIM_OC_Start_IT+0x280>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d115      	bne.n	8002976 <HAL_TIM_OC_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <HAL_TIM_OC_Start_IT+0x294>)
 8002952:	4013      	ands	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b06      	cmp	r3, #6
 800295a:	d015      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x26c>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002962:	d011      	beq.n	8002988 <HAL_TIM_OC_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	e008      	b.n	8002988 <HAL_TIM_OC_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e000      	b.n	800298a <HAL_TIM_OC_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40013400 	.word	0x40013400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	00010007 	.word	0x00010007

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9e0 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd fe98 	bl	8000734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9e3 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9b6 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fd fe6e 	bl	8000734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f9b9 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f98c 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd fe44 	bl	8000734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f98f 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f962 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd fe1a 	bl	8000734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f965 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f938 	bl	8002da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b42:	2b80      	cmp	r3, #128	@ 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b50:	2b80      	cmp	r3, #128	@ 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fe22 	bl	80037a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7e:	2b80      	cmp	r3, #128	@ 0x80
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fe15 	bl	80037bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b40      	cmp	r3, #64	@ 0x40
 8002b9e:	d10e      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f913 	bl	8002de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d10e      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d107      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0220 	mvn.w	r2, #32
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fdd5 	bl	8003794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fddb 	bl	80037d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c28:	d10f      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fdcd 	bl	80037e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c58:	d10f      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fdbf 	bl	80037f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c88:	d10f      	bne.n	8002caa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fdb1 	bl	800380c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e066      	b.n	8002da0 <HAL_TIM_OC_ConfigChannel+0xec>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b14      	cmp	r3, #20
 8002cde:	d857      	bhi.n	8002d90 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002d91 	.word	0x08002d91
 8002cf0:	08002d91 	.word	0x08002d91
 8002cf4:	08002d91 	.word	0x08002d91
 8002cf8:	08002d4b 	.word	0x08002d4b
 8002cfc:	08002d91 	.word	0x08002d91
 8002d00:	08002d91 	.word	0x08002d91
 8002d04:	08002d91 	.word	0x08002d91
 8002d08:	08002d59 	.word	0x08002d59
 8002d0c:	08002d91 	.word	0x08002d91
 8002d10:	08002d91 	.word	0x08002d91
 8002d14:	08002d91 	.word	0x08002d91
 8002d18:	08002d67 	.word	0x08002d67
 8002d1c:	08002d91 	.word	0x08002d91
 8002d20:	08002d91 	.word	0x08002d91
 8002d24:	08002d91 	.word	0x08002d91
 8002d28:	08002d75 	.word	0x08002d75
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002d91 	.word	0x08002d91
 8002d34:	08002d91 	.word	0x08002d91
 8002d38:	08002d83 	.word	0x08002d83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f8e8 	bl	8002f18 <TIM_OC1_SetConfig>
      break;
 8002d48:	e025      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f971 	bl	8003038 <TIM_OC2_SetConfig>
      break;
 8002d56:	e01e      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9f4 	bl	800314c <TIM_OC3_SetConfig>
      break;
 8002d64:	e017      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fa75 	bl	800325c <TIM_OC4_SetConfig>
      break;
 8002d72:	e010      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 faf8 	bl	8003370 <TIM_OC5_SetConfig>
      break;
 8002d80:	e009      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb55 	bl	8003438 <TIM_OC6_SetConfig>
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002efc <TIM_Base_SetConfig+0x104>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00f      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d00b      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a39      	ldr	r2, [pc, #228]	@ (8002f00 <TIM_Base_SetConfig+0x108>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a38      	ldr	r2, [pc, #224]	@ (8002f04 <TIM_Base_SetConfig+0x10c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x38>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a37      	ldr	r2, [pc, #220]	@ (8002f08 <TIM_Base_SetConfig+0x110>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <TIM_Base_SetConfig+0x104>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	@ (8002f00 <TIM_Base_SetConfig+0x108>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <TIM_Base_SetConfig+0x10c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a28      	ldr	r2, [pc, #160]	@ (8002f08 <TIM_Base_SetConfig+0x110>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	@ (8002f0c <TIM_Base_SetConfig+0x114>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <TIM_Base_SetConfig+0x118>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x8a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <TIM_Base_SetConfig+0x104>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <TIM_Base_SetConfig+0x110>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f10 <TIM_Base_SetConfig+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0xe8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	@ (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40013400 	.word	0x40013400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800

08002f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 0302 	bic.w	r3, r3, #2
 8002f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <TIM_OC1_SetConfig+0x10c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00f      	beq.n	8002f98 <TIM_OC1_SetConfig+0x80>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003028 <TIM_OC1_SetConfig+0x110>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_OC1_SetConfig+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	@ (800302c <TIM_OC1_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_OC1_SetConfig+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a29      	ldr	r2, [pc, #164]	@ (8003030 <TIM_OC1_SetConfig+0x118>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC1_SetConfig+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a28      	ldr	r2, [pc, #160]	@ (8003034 <TIM_OC1_SetConfig+0x11c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10c      	bne.n	8002fb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0308 	bic.w	r3, r3, #8
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <TIM_OC1_SetConfig+0x10c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <TIM_OC1_SetConfig+0xc2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <TIM_OC1_SetConfig+0x110>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_OC1_SetConfig+0xc2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <TIM_OC1_SetConfig+0x114>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_OC1_SetConfig+0xc2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <TIM_OC1_SetConfig+0x118>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_OC1_SetConfig+0xc2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <TIM_OC1_SetConfig+0x11c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d111      	bne.n	8002ffe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40013400 	.word	0x40013400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800

08003038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0320 	bic.w	r3, r3, #32
 8003086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a28      	ldr	r2, [pc, #160]	@ (8003138 <TIM_OC2_SetConfig+0x100>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC2_SetConfig+0x6c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a27      	ldr	r2, [pc, #156]	@ (800313c <TIM_OC2_SetConfig+0x104>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10d      	bne.n	80030c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <TIM_OC2_SetConfig+0x100>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00f      	beq.n	80030e8 <TIM_OC2_SetConfig+0xb0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <TIM_OC2_SetConfig+0x104>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <TIM_OC2_SetConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <TIM_OC2_SetConfig+0x108>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_OC2_SetConfig+0xb0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a1a      	ldr	r2, [pc, #104]	@ (8003144 <TIM_OC2_SetConfig+0x10c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a19      	ldr	r2, [pc, #100]	@ (8003148 <TIM_OC2_SetConfig+0x110>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d113      	bne.n	8003110 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800

0800314c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <TIM_OC3_SetConfig+0xfc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_OC3_SetConfig+0x6a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a26      	ldr	r2, [pc, #152]	@ (800324c <TIM_OC3_SetConfig+0x100>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10d      	bne.n	80031d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <TIM_OC3_SetConfig+0xfc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_OC3_SetConfig+0xae>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1b      	ldr	r2, [pc, #108]	@ (800324c <TIM_OC3_SetConfig+0x100>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_OC3_SetConfig+0xae>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003250 <TIM_OC3_SetConfig+0x104>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_OC3_SetConfig+0xae>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	@ (8003254 <TIM_OC3_SetConfig+0x108>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_OC3_SetConfig+0xae>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a18      	ldr	r2, [pc, #96]	@ (8003258 <TIM_OC3_SetConfig+0x10c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800

0800325c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a28      	ldr	r2, [pc, #160]	@ (800335c <TIM_OC4_SetConfig+0x100>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_OC4_SetConfig+0x6c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <TIM_OC4_SetConfig+0x104>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10d      	bne.n	80032e4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	031b      	lsls	r3, r3, #12
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <TIM_OC4_SetConfig+0x100>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00f      	beq.n	800330c <TIM_OC4_SetConfig+0xb0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <TIM_OC4_SetConfig+0x104>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_OC4_SetConfig+0xb0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <TIM_OC4_SetConfig+0x108>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_OC4_SetConfig+0xb0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003368 <TIM_OC4_SetConfig+0x10c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC4_SetConfig+0xb0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a19      	ldr	r2, [pc, #100]	@ (800336c <TIM_OC4_SetConfig+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d113      	bne.n	8003334 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003312:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800331a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40013400 	.word	0x40013400
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80033b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <TIM_OC5_SetConfig+0xb4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_OC5_SetConfig+0x7a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <TIM_OC5_SetConfig+0xb8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_OC5_SetConfig+0x7a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a15      	ldr	r2, [pc, #84]	@ (800342c <TIM_OC5_SetConfig+0xbc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_OC5_SetConfig+0x7a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <TIM_OC5_SetConfig+0xc0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_OC5_SetConfig+0x7a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <TIM_OC5_SetConfig+0xc4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d109      	bne.n	80033fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40013400 	.word	0x40013400
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800347e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a18      	ldr	r2, [pc, #96]	@ (80034f0 <TIM_OC6_SetConfig+0xb8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00f      	beq.n	80034b4 <TIM_OC6_SetConfig+0x7c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <TIM_OC6_SetConfig+0xbc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00b      	beq.n	80034b4 <TIM_OC6_SetConfig+0x7c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <TIM_OC6_SetConfig+0xc0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_OC6_SetConfig+0x7c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a15      	ldr	r2, [pc, #84]	@ (80034fc <TIM_OC6_SetConfig+0xc4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_OC6_SetConfig+0x7c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <TIM_OC6_SetConfig+0xc8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d109      	bne.n	80034c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003564:	2302      	movs	r3, #2
 8003566:	e065      	b.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2c      	ldr	r2, [pc, #176]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2b      	ldr	r2, [pc, #172]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80035a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80035b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d013      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a18      	ldr	r2, [pc, #96]	@ (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a17      	ldr	r2, [pc, #92]	@ (800364c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10c      	bne.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800360e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40013400 	.word	0x40013400
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40014000 	.word	0x40014000

08003654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800366c:	2302      	movs	r3, #2
 800366e:	e087      	b.n	8003780 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	@ (8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d106      	bne.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1d      	ldr	r2, [pc, #116]	@ (8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d126      	bne.n	800376e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	051b      	lsls	r3, r3, #20
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0e      	ldr	r2, [pc, #56]	@ (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d106      	bne.n	800376e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40013400 	.word	0x40013400

08003794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e042      	b.n	80038b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd f9f5 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2224      	movs	r2, #36	@ 0x24
 800384e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fbba 	bl	8003fdc <UART_SetConfig>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fe7a 	bl	8004574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800388e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800389e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 ff01 	bl	80046b8 <UART_CheckIdleState>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d142      	bne.n	800395e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Receive_IT+0x24>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e03b      	b.n	8003960 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Receive_IT+0x36>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e034      	b.n	8003960 <HAL_UART_Receive_IT+0xa0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_UART_Receive_IT+0xa8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	613b      	str	r3, [r7, #16]
   return(result);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	69f9      	ldr	r1, [r7, #28]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	61bb      	str	r3, [r7, #24]
   return(result);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e6      	bne.n	800391c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	461a      	mov	r2, r3
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 ffc3 	bl	80048e0 <UART_Start_Receive_IT>
 800395a:	4603      	mov	r3, r0
 800395c:	e000      	b.n	8003960 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40008000 	.word	0x40008000

0800396c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0ba      	sub	sp, #232	@ 0xe8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003992:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003996:	f640 030f 	movw	r3, #2063	@ 0x80f
 800399a:	4013      	ands	r3, r2
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80039a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11b      	bne.n	80039e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d015      	beq.n	80039e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 82d6 	beq.w	8003f82 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
      }
      return;
 80039de:	e2d0      	b.n	8003f82 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 811f 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80039ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003c1c <HAL_UART_IRQHandler+0x2b0>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80039fa:	4b89      	ldr	r3, [pc, #548]	@ (8003c20 <HAL_UART_IRQHandler+0x2b4>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8112 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <HAL_UART_IRQHandler+0xc8>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_UART_IRQHandler+0xf8>
 8003a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_UART_IRQHandler+0x128>
 8003a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2204      	movs	r2, #4
 8003a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d017      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003aac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c1c <HAL_UART_IRQHandler+0x2b0>)
 8003ab2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac6:	f043 0208 	orr.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_UART_IRQHandler+0x196>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 823c 	beq.w	8003f86 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04f      	beq.n	8003c06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 ffe4 	bl	8004b34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d141      	bne.n	8003bfe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1d9      	bne.n	8003b7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d013      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bd2:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <HAL_UART_IRQHandler+0x2b8>)
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fb48 	bl	8001270 <HAL_DMA_Abort_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d017      	beq.n	8003c16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e00f      	b.n	8003c16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9da 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00b      	b.n	8003c16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9d6 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e007      	b.n	8003c16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9d2 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8003c14:	e1b7      	b.n	8003f86 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c16:	bf00      	nop
    return;
 8003c18:	e1b5      	b.n	8003f86 <HAL_UART_IRQHandler+0x61a>
 8003c1a:	bf00      	nop
 8003c1c:	10000001 	.word	0x10000001
 8003c20:	04000120 	.word	0x04000120
 8003c24:	08004c01 	.word	0x08004c01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 814a 	bne.w	8003ec6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8143 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 813c 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	f040 80b5 	bne.w	8003dd0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8187 	beq.w	8003f8a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c86:	429a      	cmp	r2, r3
 8003c88:	f080 817f 	bcs.w	8003f8a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 8086 	bne.w	8003db4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cd6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1da      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3308      	adds	r3, #8
 8003d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e1      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e3      	bne.n	8003d2e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e4      	bne.n	8003d74 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fa05 	bl	80011be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8fb 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dce:	e0dc      	b.n	8003f8a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80ce 	beq.w	8003f8e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80c9 	beq.w	8003f8e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e4      	bne.n	8003dfc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	623b      	str	r3, [r7, #32]
   return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e1      	bne.n	8003e32 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e4      	bne.n	8003e82 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f880 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec4:	e063      	b.n	8003f8e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x584>
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fb27 	bl	800553c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eee:	e051      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d014      	beq.n	8003f26 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03a      	beq.n	8003f92 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
    }
    return;
 8003f24:	e035      	b.n	8003f92 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_UART_IRQHandler+0x5da>
 8003f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fe74 	bl	8004c2c <UART_EndTransmit_IT>
    return;
 8003f44:	e026      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_UART_IRQHandler+0x5fa>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 fb00 	bl	8005564 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f64:	e016      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_UART_IRQHandler+0x628>
 8003f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da0c      	bge.n	8003f94 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fae8 	bl	8005550 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f80:	e008      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
      return;
 8003f82:	bf00      	nop
 8003f84:	e006      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
    return;
 8003f86:	bf00      	nop
 8003f88:	e004      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
      return;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
      return;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_UART_IRQHandler+0x628>
    return;
 8003f92:	bf00      	nop
  }
}
 8003f94:	37e8      	adds	r7, #232	@ 0xe8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop

08003f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe0:	b08c      	sub	sp, #48	@ 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4bab      	ldr	r3, [pc, #684]	@ (80042b8 <UART_SetConfig+0x2dc>)
 800400c:	4013      	ands	r3, r2
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004014:	430b      	orrs	r3, r1
 8004016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4aa0      	ldr	r2, [pc, #640]	@ (80042bc <UART_SetConfig+0x2e0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004044:	4313      	orrs	r3, r2
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800405c:	430b      	orrs	r3, r1
 800405e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f023 010f 	bic.w	r1, r3, #15
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a91      	ldr	r2, [pc, #580]	@ (80042c0 <UART_SetConfig+0x2e4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d125      	bne.n	80040cc <UART_SetConfig+0xf0>
 8004080:	4b90      	ldr	r3, [pc, #576]	@ (80042c4 <UART_SetConfig+0x2e8>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b03      	cmp	r3, #3
 800408c:	d81a      	bhi.n	80040c4 <UART_SetConfig+0xe8>
 800408e:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <UART_SetConfig+0xb8>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040b5 	.word	0x080040b5
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040bd 	.word	0x080040bd
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040aa:	e0d6      	b.n	800425a <UART_SetConfig+0x27e>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b2:	e0d2      	b.n	800425a <UART_SetConfig+0x27e>
 80040b4:	2304      	movs	r3, #4
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ba:	e0ce      	b.n	800425a <UART_SetConfig+0x27e>
 80040bc:	2308      	movs	r3, #8
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c2:	e0ca      	b.n	800425a <UART_SetConfig+0x27e>
 80040c4:	2310      	movs	r3, #16
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ca:	e0c6      	b.n	800425a <UART_SetConfig+0x27e>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7d      	ldr	r2, [pc, #500]	@ (80042c8 <UART_SetConfig+0x2ec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d138      	bne.n	8004148 <UART_SetConfig+0x16c>
 80040d6:	4b7b      	ldr	r3, [pc, #492]	@ (80042c4 <UART_SetConfig+0x2e8>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d82d      	bhi.n	8004140 <UART_SetConfig+0x164>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x110>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004121 	.word	0x08004121
 80040f0:	08004141 	.word	0x08004141
 80040f4:	08004141 	.word	0x08004141
 80040f8:	08004141 	.word	0x08004141
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004141 	.word	0x08004141
 8004104:	08004141 	.word	0x08004141
 8004108:	08004141 	.word	0x08004141
 800410c:	08004129 	.word	0x08004129
 8004110:	08004141 	.word	0x08004141
 8004114:	08004141 	.word	0x08004141
 8004118:	08004141 	.word	0x08004141
 800411c:	08004139 	.word	0x08004139
 8004120:	2300      	movs	r3, #0
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004126:	e098      	b.n	800425a <UART_SetConfig+0x27e>
 8004128:	2302      	movs	r3, #2
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412e:	e094      	b.n	800425a <UART_SetConfig+0x27e>
 8004130:	2304      	movs	r3, #4
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e090      	b.n	800425a <UART_SetConfig+0x27e>
 8004138:	2308      	movs	r3, #8
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413e:	e08c      	b.n	800425a <UART_SetConfig+0x27e>
 8004140:	2310      	movs	r3, #16
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004146:	e088      	b.n	800425a <UART_SetConfig+0x27e>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5f      	ldr	r2, [pc, #380]	@ (80042cc <UART_SetConfig+0x2f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d125      	bne.n	800419e <UART_SetConfig+0x1c2>
 8004152:	4b5c      	ldr	r3, [pc, #368]	@ (80042c4 <UART_SetConfig+0x2e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800415c:	2b30      	cmp	r3, #48	@ 0x30
 800415e:	d016      	beq.n	800418e <UART_SetConfig+0x1b2>
 8004160:	2b30      	cmp	r3, #48	@ 0x30
 8004162:	d818      	bhi.n	8004196 <UART_SetConfig+0x1ba>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d00a      	beq.n	800417e <UART_SetConfig+0x1a2>
 8004168:	2b20      	cmp	r3, #32
 800416a:	d814      	bhi.n	8004196 <UART_SetConfig+0x1ba>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <UART_SetConfig+0x19a>
 8004170:	2b10      	cmp	r3, #16
 8004172:	d008      	beq.n	8004186 <UART_SetConfig+0x1aa>
 8004174:	e00f      	b.n	8004196 <UART_SetConfig+0x1ba>
 8004176:	2300      	movs	r3, #0
 8004178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417c:	e06d      	b.n	800425a <UART_SetConfig+0x27e>
 800417e:	2302      	movs	r3, #2
 8004180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004184:	e069      	b.n	800425a <UART_SetConfig+0x27e>
 8004186:	2304      	movs	r3, #4
 8004188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418c:	e065      	b.n	800425a <UART_SetConfig+0x27e>
 800418e:	2308      	movs	r3, #8
 8004190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004194:	e061      	b.n	800425a <UART_SetConfig+0x27e>
 8004196:	2310      	movs	r3, #16
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419c:	e05d      	b.n	800425a <UART_SetConfig+0x27e>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4b      	ldr	r2, [pc, #300]	@ (80042d0 <UART_SetConfig+0x2f4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d125      	bne.n	80041f4 <UART_SetConfig+0x218>
 80041a8:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <UART_SetConfig+0x2e8>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b4:	d016      	beq.n	80041e4 <UART_SetConfig+0x208>
 80041b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b8:	d818      	bhi.n	80041ec <UART_SetConfig+0x210>
 80041ba:	2b80      	cmp	r3, #128	@ 0x80
 80041bc:	d00a      	beq.n	80041d4 <UART_SetConfig+0x1f8>
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d814      	bhi.n	80041ec <UART_SetConfig+0x210>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <UART_SetConfig+0x1f0>
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d008      	beq.n	80041dc <UART_SetConfig+0x200>
 80041ca:	e00f      	b.n	80041ec <UART_SetConfig+0x210>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e042      	b.n	800425a <UART_SetConfig+0x27e>
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041da:	e03e      	b.n	800425a <UART_SetConfig+0x27e>
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e03a      	b.n	800425a <UART_SetConfig+0x27e>
 80041e4:	2308      	movs	r3, #8
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ea:	e036      	b.n	800425a <UART_SetConfig+0x27e>
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041f2:	e032      	b.n	800425a <UART_SetConfig+0x27e>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <UART_SetConfig+0x2e0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d12a      	bne.n	8004254 <UART_SetConfig+0x278>
 80041fe:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <UART_SetConfig+0x2e8>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004208:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800420c:	d01a      	beq.n	8004244 <UART_SetConfig+0x268>
 800420e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004212:	d81b      	bhi.n	800424c <UART_SetConfig+0x270>
 8004214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004218:	d00c      	beq.n	8004234 <UART_SetConfig+0x258>
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421e:	d815      	bhi.n	800424c <UART_SetConfig+0x270>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <UART_SetConfig+0x250>
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d008      	beq.n	800423c <UART_SetConfig+0x260>
 800422a:	e00f      	b.n	800424c <UART_SetConfig+0x270>
 800422c:	2300      	movs	r3, #0
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004232:	e012      	b.n	800425a <UART_SetConfig+0x27e>
 8004234:	2302      	movs	r3, #2
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423a:	e00e      	b.n	800425a <UART_SetConfig+0x27e>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e00a      	b.n	800425a <UART_SetConfig+0x27e>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424a:	e006      	b.n	800425a <UART_SetConfig+0x27e>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004252:	e002      	b.n	800425a <UART_SetConfig+0x27e>
 8004254:	2310      	movs	r3, #16
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <UART_SetConfig+0x2e0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	f040 80a8 	bne.w	80043b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800426a:	2b08      	cmp	r3, #8
 800426c:	d834      	bhi.n	80042d8 <UART_SetConfig+0x2fc>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x298>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004299 	.word	0x08004299
 8004278:	080042d9 	.word	0x080042d9
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042a7 	.word	0x080042a7
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042d9 	.word	0x080042d9
 8004290:	080042d9 	.word	0x080042d9
 8004294:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fd ff86 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429e:	e021      	b.n	80042e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <UART_SetConfig+0x2f8>)
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042a4:	e01e      	b.n	80042e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fd ff11 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80042aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042ac:	e01a      	b.n	80042e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042b4:	e016      	b.n	80042e4 <UART_SetConfig+0x308>
 80042b6:	bf00      	nop
 80042b8:	cfff69f3 	.word	0xcfff69f3
 80042bc:	40008000 	.word	0x40008000
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40004400 	.word	0x40004400
 80042cc:	40004800 	.word	0x40004800
 80042d0:	40004c00 	.word	0x40004c00
 80042d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 812a 	beq.w	8004540 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	4a9e      	ldr	r2, [pc, #632]	@ (800456c <UART_SetConfig+0x590>)
 80042f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f6:	461a      	mov	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	429a      	cmp	r2, r3
 800430e:	d305      	bcc.n	800431c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	429a      	cmp	r2, r3
 800431a:	d903      	bls.n	8004324 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004322:	e10d      	b.n	8004540 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	2200      	movs	r2, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	4a8e      	ldr	r2, [pc, #568]	@ (800456c <UART_SetConfig+0x590>)
 8004332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004336:	b29b      	uxth	r3, r3
 8004338:	2200      	movs	r2, #0
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004346:	f7fb ff67 	bl	8000218 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	020b      	lsls	r3, r1, #8
 800435c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004360:	0202      	lsls	r2, r0, #8
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	6849      	ldr	r1, [r1, #4]
 8004366:	0849      	lsrs	r1, r1, #1
 8004368:	2000      	movs	r0, #0
 800436a:	460c      	mov	r4, r1
 800436c:	4605      	mov	r5, r0
 800436e:	eb12 0804 	adds.w	r8, r2, r4
 8004372:	eb43 0905 	adc.w	r9, r3, r5
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	469a      	mov	sl, r3
 800437e:	4693      	mov	fp, r2
 8004380:	4652      	mov	r2, sl
 8004382:	465b      	mov	r3, fp
 8004384:	4640      	mov	r0, r8
 8004386:	4649      	mov	r1, r9
 8004388:	f7fb ff46 	bl	8000218 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439a:	d308      	bcc.n	80043ae <UART_SetConfig+0x3d2>
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a2:	d204      	bcs.n	80043ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e0c8      	b.n	8004540 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043b4:	e0c4      	b.n	8004540 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043be:	d167      	bne.n	8004490 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80043c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d828      	bhi.n	800441a <UART_SetConfig+0x43e>
 80043c8:	a201      	add	r2, pc, #4	@ (adr r2, 80043d0 <UART_SetConfig+0x3f4>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	0800441b 	.word	0x0800441b
 80043e8:	0800441b 	.word	0x0800441b
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004413 	.word	0x08004413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fd fed8 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80043f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043fa:	e014      	b.n	8004426 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fd feea 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8004400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004402:	e010      	b.n	8004426 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004404:	4b5a      	ldr	r3, [pc, #360]	@ (8004570 <UART_SetConfig+0x594>)
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440a:	f7fd fe5f 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800440e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004410:	e009      	b.n	8004426 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004418:	e005      	b.n	8004426 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8089 	beq.w	8004540 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	4a4e      	ldr	r2, [pc, #312]	@ (800456c <UART_SetConfig+0x590>)
 8004434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004438:	461a      	mov	r2, r3
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004440:	005a      	lsls	r2, r3, #1
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	441a      	add	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d916      	bls.n	8004488 <UART_SetConfig+0x4ac>
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004460:	d212      	bcs.n	8004488 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	b29a      	uxth	r2, r3
 8004478:	8bfb      	ldrh	r3, [r7, #30]
 800447a:	4313      	orrs	r3, r2
 800447c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	8bfa      	ldrh	r2, [r7, #30]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	e05b      	b.n	8004540 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800448e:	e057      	b.n	8004540 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004494:	2b08      	cmp	r3, #8
 8004496:	d828      	bhi.n	80044ea <UART_SetConfig+0x50e>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0x4c4>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fd fe70 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044ca:	e014      	b.n	80044f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fd fe82 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 80044d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <UART_SetConfig+0x594>)
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fd fdf7 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80044de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044f4:	bf00      	nop
    }

    if (pclk != 0U)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d021      	beq.n	8004540 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <UART_SetConfig+0x590>)
 8004502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004506:	461a      	mov	r2, r3
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	fbb3 f2f2 	udiv	r2, r3, r2
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	441a      	add	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	fbb2 f3f3 	udiv	r3, r2, r3
 800451e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b0f      	cmp	r3, #15
 8004524:	d909      	bls.n	800453a <UART_SetConfig+0x55e>
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452c:	d205      	bcs.n	800453a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	b29a      	uxth	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e002      	b.n	8004540 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2201      	movs	r2, #1
 8004544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2201      	movs	r2, #1
 800454c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800455c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004560:	4618      	mov	r0, r3
 8004562:	3730      	adds	r7, #48	@ 0x30
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456a:	bf00      	nop
 800456c:	08005928 	.word	0x08005928
 8004570:	00f42400 	.word	0x00f42400

08004574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004672:	d10a      	bne.n	800468a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c8:	f7fc fc5e 	bl	8000f88 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10e      	bne.n	80046fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f82f 	bl	800474e <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e025      	b.n	8004746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d10e      	bne.n	8004726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f819 	bl	800474e <UART_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e00f      	b.n	8004746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b09c      	sub	sp, #112	@ 0x70
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	4613      	mov	r3, r2
 800475c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475e:	e0a9      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	f000 80a5 	beq.w	80048b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fc fc0d 	bl	8000f88 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <UART_WaitOnFlagUntilTimeout+0x32>
 800477a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800477c:	2b00      	cmp	r3, #0
 800477e:	d140      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800478e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004790:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004794:	667b      	str	r3, [r7, #100]	@ 0x64
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800479e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047a0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80047ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e6      	bne.n	8004780 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047d2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80047d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80047e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e5      	bne.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e069      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d051      	beq.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800481e:	d149      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004828:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800483e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
 800484a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800484e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e6      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800487c:	623a      	str	r2, [r7, #32]
 800487e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	61bb      	str	r3, [r7, #24]
   return(result);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e010      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f43f af46 	beq.w	8004760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3770      	adds	r7, #112	@ 0x70
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b0a3      	sub	sp, #140	@ 0x8c
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	88fa      	ldrh	r2, [r7, #6]
 8004900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004912:	d10e      	bne.n	8004932 <UART_Start_Receive_IT+0x52>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <UART_Start_Receive_IT+0x48>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004926:	e02d      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22ff      	movs	r2, #255	@ 0xff
 800492c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004930:	e028      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <UART_Start_Receive_IT+0x76>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <UART_Start_Receive_IT+0x6c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	22ff      	movs	r2, #255	@ 0xff
 8004946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800494a:	e01b      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	227f      	movs	r2, #127	@ 0x7f
 8004950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004954:	e016      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495e:	d10d      	bne.n	800497c <UART_Start_Receive_IT+0x9c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <UART_Start_Receive_IT+0x92>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	227f      	movs	r2, #127	@ 0x7f
 800496c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004970:	e008      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	223f      	movs	r2, #63	@ 0x3f
 8004976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800497a:	e003      	b.n	8004984 <UART_Start_Receive_IT+0xa4>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2222      	movs	r2, #34	@ 0x22
 8004990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80049a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80049b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80049ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80049be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80049c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e3      	bne.n	8004994 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049d4:	d153      	bne.n	8004a7e <UART_Start_Receive_IT+0x19e>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d34d      	bcc.n	8004a7e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ea:	d107      	bne.n	80049fc <UART_Start_Receive_IT+0x11c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004b24 <UART_Start_Receive_IT+0x244>)
 80049f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80049fa:	e002      	b.n	8004a02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004b28 <UART_Start_Receive_IT+0x248>)
 8004a00:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01a      	beq.n	8004a48 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e4      	bne.n	8004a12 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_Start_Receive_IT+0x168>
 8004a7c:	e04a      	b.n	8004b14 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a86:	d107      	bne.n	8004a98 <UART_Start_Receive_IT+0x1b8>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a26      	ldr	r2, [pc, #152]	@ (8004b2c <UART_Start_Receive_IT+0x24c>)
 8004a94:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a96:	e002      	b.n	8004a9e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <UART_Start_Receive_IT+0x250>)
 8004a9c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d019      	beq.n	8004ae2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ac2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ace:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e6      	bne.n	8004aae <UART_Start_Receive_IT+0x1ce>
 8004ae0:	e018      	b.n	8004b14 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	613b      	str	r3, [r7, #16]
   return(result);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f043 0320 	orr.w	r3, r3, #32
 8004af6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	69f9      	ldr	r1, [r7, #28]
 8004b06:	6a3a      	ldr	r2, [r7, #32]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	378c      	adds	r7, #140	@ 0x8c
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	0800523d 	.word	0x0800523d
 8004b28:	08004f45 	.word	0x08004f45
 8004b2c:	08004de3 	.word	0x08004de3
 8004b30:	08004c83 	.word	0x08004c83

08004b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b095      	sub	sp, #84	@ 0x54
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e3      	bne.n	8004b6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d118      	bne.n	8004be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e6      	bne.n	8004bae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8004bf4:	bf00      	nop
 8004bf6:	3754      	adds	r7, #84	@ 0x54
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff f9c6 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6979      	ldr	r1, [r7, #20]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e6      	bne.n	8004c34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff f991 	bl	8003f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7a:	bf00      	nop
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b096      	sub	sp, #88	@ 0x58
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c90:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	2b22      	cmp	r3, #34	@ 0x22
 8004c9c:	f040 8095 	bne.w	8004dca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004caa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cba:	400a      	ands	r2, r1
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d178      	bne.n	8004dda <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e6      	bne.n	8004ce8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e5      	bne.n	8004d1a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d12e      	bne.n	8004dc2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0310 	bic.w	r3, r3, #16
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	617b      	str	r3, [r7, #20]
   return(result);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d103      	bne.n	8004db2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2210      	movs	r2, #16
 8004db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff f902 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dc0:	e00b      	b.n	8004dda <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fba0 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8004dc8:	e007      	b.n	8004dda <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0208 	orr.w	r2, r2, #8
 8004dd8:	619a      	str	r2, [r3, #24]
}
 8004dda:	bf00      	nop
 8004ddc:	3758      	adds	r7, #88	@ 0x58
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b096      	sub	sp, #88	@ 0x58
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004df0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	2b22      	cmp	r3, #34	@ 0x22
 8004dfc:	f040 8095 	bne.w	8004f2a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e10:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8004e14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d178      	bne.n	8004f3a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e6      	bne.n	8004e48 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d12e      	bne.n	8004f22 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d103      	bne.n	8004f12 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff f852 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f20:	e00b      	b.n	8004f3a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fb faf0 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8004f28:	e007      	b.n	8004f3a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	619a      	str	r2, [r3, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	3758      	adds	r7, #88	@ 0x58
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b0a6      	sub	sp, #152	@ 0x98
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f52:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	2b22      	cmp	r3, #34	@ 0x22
 8004f7c:	f040 814f 	bne.w	800521e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004f86:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f8a:	e0f6      	b.n	800517a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f96:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8004f9a:	b2d9      	uxtb	r1, r3
 8004f9c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d053      	beq.n	8005086 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005004:	f043 0201 	orr.w	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800500e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d011      	beq.n	800503e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800501a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2202      	movs	r2, #2
 800502c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005034:	f043 0204 	orr.w	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800503e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800504a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005064:	f043 0202 	orr.w	r2, r3, #2
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d006      	beq.n	8005086 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fe ff99 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d173      	bne.n	800517a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80050a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050b6:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80050ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80050c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e4      	bne.n	8005092 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050ec:	657a      	str	r2, [r7, #84]	@ 0x54
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80050fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e3      	bne.n	80050c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d12e      	bne.n	8005174 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	f023 0310 	bic.w	r3, r3, #16
 8005130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800513a:	643b      	str	r3, [r7, #64]	@ 0x40
 800513c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005140:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e6      	bne.n	800511c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d103      	bne.n	8005164 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2210      	movs	r2, #16
 8005162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fe ff29 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
 8005172:	e002      	b.n	800517a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb f9c7 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800517a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005182:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	f47f aefe 	bne.w	8004f8c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005196:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800519a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d045      	beq.n	800522e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80051a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d23e      	bcs.n	800522e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80051d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80051e8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f043 0320 	orr.w	r3, r3, #32
 80051fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6979      	ldr	r1, [r7, #20]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800521c:	e007      	b.n	800522e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0208 	orr.w	r2, r2, #8
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	bf00      	nop
 8005230:	3798      	adds	r7, #152	@ 0x98
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08004c83 	.word	0x08004c83

0800523c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0a8      	sub	sp, #160	@ 0xa0
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800524a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	2b22      	cmp	r3, #34	@ 0x22
 8005274:	f040 8153 	bne.w	800551e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800527e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005282:	e0fa      	b.n	800547a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005296:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800529a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800529e:	4013      	ands	r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d053      	beq.n	8005382 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <UART_RxISR_16BIT_FIFOEN+0xce>
 80052e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2201      	movs	r2, #1
 80052f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800530a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d011      	beq.n	800533a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005316:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2202      	movs	r2, #2
 8005328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005330:	f043 0204 	orr.w	r2, r3, #4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800533a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005346:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2204      	movs	r2, #4
 8005358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005360:	f043 0202 	orr.w	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fe fe1b 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d175      	bne.n	800547a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800539c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800539e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e4      	bne.n	800538e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e1      	bne.n	80053c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d12e      	bne.n	8005474 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	f023 0310 	bic.w	r3, r3, #16
 8005430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e6      	bne.n	800541c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d103      	bne.n	8005464 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2210      	movs	r2, #16
 8005462:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fe fda9 	bl	8003fc4 <HAL_UARTEx_RxEventCallback>
 8005472:	e002      	b.n	800547a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fb f847 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800547a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005482:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	f47f aefa 	bne.w	8005284 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005496:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800549a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d045      	beq.n	800552e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80054a8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d23e      	bcs.n	800552e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	623b      	str	r3, [r7, #32]
   return(result);
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80054e8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f043 0320 	orr.w	r3, r3, #32
 80054fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	617b      	str	r3, [r7, #20]
   return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800551c:	e007      	b.n	800552e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0208 	orr.w	r2, r2, #8
 800552c:	619a      	str	r2, [r3, #24]
}
 800552e:	bf00      	nop
 8005530:	37a0      	adds	r7, #160	@ 0xa0
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	08004de3 	.word	0x08004de3

0800553c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_UARTEx_EnableFifoMode+0x16>
 800558a:	2302      	movs	r3, #2
 800558c:	e02b      	b.n	80055e6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2224      	movs	r2, #36	@ 0x24
 800559a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80055c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f88a 	bl	80056e8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005602:	2302      	movs	r3, #2
 8005604:	e02d      	b.n	8005662 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2224      	movs	r2, #36	@ 0x24
 8005612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f850 	bl	80056e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800567e:	2302      	movs	r3, #2
 8005680:	e02d      	b.n	80056de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2224      	movs	r2, #36	@ 0x24
 800568e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f812 	bl	80056e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005708:	e031      	b.n	800576e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800570a:	2308      	movs	r3, #8
 800570c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800570e:	2308      	movs	r3, #8
 8005710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	0e5b      	lsrs	r3, r3, #25
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	0f5b      	lsrs	r3, r3, #29
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	7b3a      	ldrb	r2, [r7, #12]
 8005736:	4911      	ldr	r1, [pc, #68]	@ (800577c <UARTEx_SetNbDataToProcess+0x94>)
 8005738:	5c8a      	ldrb	r2, [r1, r2]
 800573a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800573e:	7b3a      	ldrb	r2, [r7, #12]
 8005740:	490f      	ldr	r1, [pc, #60]	@ (8005780 <UARTEx_SetNbDataToProcess+0x98>)
 8005742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005744:	fb93 f3f2 	sdiv	r3, r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	7b7a      	ldrb	r2, [r7, #13]
 8005754:	4909      	ldr	r1, [pc, #36]	@ (800577c <UARTEx_SetNbDataToProcess+0x94>)
 8005756:	5c8a      	ldrb	r2, [r1, r2]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800575c:	7b7a      	ldrb	r2, [r7, #13]
 800575e:	4908      	ldr	r1, [pc, #32]	@ (8005780 <UARTEx_SetNbDataToProcess+0x98>)
 8005760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005762:	fb93 f3f2 	sdiv	r3, r3, r2
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	08005940 	.word	0x08005940
 8005780:	08005948 	.word	0x08005948

08005784 <atoi>:
 8005784:	220a      	movs	r2, #10
 8005786:	2100      	movs	r1, #0
 8005788:	f000 b87a 	b.w	8005880 <strtol>

0800578c <_strtol_l.constprop.0>:
 800578c:	2b24      	cmp	r3, #36	@ 0x24
 800578e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005792:	4686      	mov	lr, r0
 8005794:	4690      	mov	r8, r2
 8005796:	d801      	bhi.n	800579c <_strtol_l.constprop.0+0x10>
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <_strtol_l.constprop.0+0x1e>
 800579c:	f000 f882 	bl	80058a4 <__errno>
 80057a0:	2316      	movs	r3, #22
 80057a2:	6003      	str	r3, [r0, #0]
 80057a4:	2000      	movs	r0, #0
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	4834      	ldr	r0, [pc, #208]	@ (800587c <_strtol_l.constprop.0+0xf0>)
 80057ac:	460d      	mov	r5, r1
 80057ae:	462a      	mov	r2, r5
 80057b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057b4:	5d06      	ldrb	r6, [r0, r4]
 80057b6:	f016 0608 	ands.w	r6, r6, #8
 80057ba:	d1f8      	bne.n	80057ae <_strtol_l.constprop.0+0x22>
 80057bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80057be:	d12d      	bne.n	800581c <_strtol_l.constprop.0+0x90>
 80057c0:	782c      	ldrb	r4, [r5, #0]
 80057c2:	2601      	movs	r6, #1
 80057c4:	1c95      	adds	r5, r2, #2
 80057c6:	f033 0210 	bics.w	r2, r3, #16
 80057ca:	d109      	bne.n	80057e0 <_strtol_l.constprop.0+0x54>
 80057cc:	2c30      	cmp	r4, #48	@ 0x30
 80057ce:	d12a      	bne.n	8005826 <_strtol_l.constprop.0+0x9a>
 80057d0:	782a      	ldrb	r2, [r5, #0]
 80057d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057d6:	2a58      	cmp	r2, #88	@ 0x58
 80057d8:	d125      	bne.n	8005826 <_strtol_l.constprop.0+0x9a>
 80057da:	786c      	ldrb	r4, [r5, #1]
 80057dc:	2310      	movs	r3, #16
 80057de:	3502      	adds	r5, #2
 80057e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80057e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80057e8:	2200      	movs	r2, #0
 80057ea:	fbbc f9f3 	udiv	r9, ip, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80057f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80057f8:	2f09      	cmp	r7, #9
 80057fa:	d81b      	bhi.n	8005834 <_strtol_l.constprop.0+0xa8>
 80057fc:	463c      	mov	r4, r7
 80057fe:	42a3      	cmp	r3, r4
 8005800:	dd27      	ble.n	8005852 <_strtol_l.constprop.0+0xc6>
 8005802:	1c57      	adds	r7, r2, #1
 8005804:	d007      	beq.n	8005816 <_strtol_l.constprop.0+0x8a>
 8005806:	4581      	cmp	r9, r0
 8005808:	d320      	bcc.n	800584c <_strtol_l.constprop.0+0xc0>
 800580a:	d101      	bne.n	8005810 <_strtol_l.constprop.0+0x84>
 800580c:	45a2      	cmp	sl, r4
 800580e:	db1d      	blt.n	800584c <_strtol_l.constprop.0+0xc0>
 8005810:	fb00 4003 	mla	r0, r0, r3, r4
 8005814:	2201      	movs	r2, #1
 8005816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800581a:	e7eb      	b.n	80057f4 <_strtol_l.constprop.0+0x68>
 800581c:	2c2b      	cmp	r4, #43	@ 0x2b
 800581e:	bf04      	itt	eq
 8005820:	782c      	ldrbeq	r4, [r5, #0]
 8005822:	1c95      	addeq	r5, r2, #2
 8005824:	e7cf      	b.n	80057c6 <_strtol_l.constprop.0+0x3a>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1da      	bne.n	80057e0 <_strtol_l.constprop.0+0x54>
 800582a:	2c30      	cmp	r4, #48	@ 0x30
 800582c:	bf0c      	ite	eq
 800582e:	2308      	moveq	r3, #8
 8005830:	230a      	movne	r3, #10
 8005832:	e7d5      	b.n	80057e0 <_strtol_l.constprop.0+0x54>
 8005834:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005838:	2f19      	cmp	r7, #25
 800583a:	d801      	bhi.n	8005840 <_strtol_l.constprop.0+0xb4>
 800583c:	3c37      	subs	r4, #55	@ 0x37
 800583e:	e7de      	b.n	80057fe <_strtol_l.constprop.0+0x72>
 8005840:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005844:	2f19      	cmp	r7, #25
 8005846:	d804      	bhi.n	8005852 <_strtol_l.constprop.0+0xc6>
 8005848:	3c57      	subs	r4, #87	@ 0x57
 800584a:	e7d8      	b.n	80057fe <_strtol_l.constprop.0+0x72>
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	e7e1      	b.n	8005816 <_strtol_l.constprop.0+0x8a>
 8005852:	1c53      	adds	r3, r2, #1
 8005854:	d108      	bne.n	8005868 <_strtol_l.constprop.0+0xdc>
 8005856:	2322      	movs	r3, #34	@ 0x22
 8005858:	f8ce 3000 	str.w	r3, [lr]
 800585c:	4660      	mov	r0, ip
 800585e:	f1b8 0f00 	cmp.w	r8, #0
 8005862:	d0a0      	beq.n	80057a6 <_strtol_l.constprop.0+0x1a>
 8005864:	1e69      	subs	r1, r5, #1
 8005866:	e006      	b.n	8005876 <_strtol_l.constprop.0+0xea>
 8005868:	b106      	cbz	r6, 800586c <_strtol_l.constprop.0+0xe0>
 800586a:	4240      	negs	r0, r0
 800586c:	f1b8 0f00 	cmp.w	r8, #0
 8005870:	d099      	beq.n	80057a6 <_strtol_l.constprop.0+0x1a>
 8005872:	2a00      	cmp	r2, #0
 8005874:	d1f6      	bne.n	8005864 <_strtol_l.constprop.0+0xd8>
 8005876:	f8c8 1000 	str.w	r1, [r8]
 800587a:	e794      	b.n	80057a6 <_strtol_l.constprop.0+0x1a>
 800587c:	08005951 	.word	0x08005951

08005880 <strtol>:
 8005880:	4613      	mov	r3, r2
 8005882:	460a      	mov	r2, r1
 8005884:	4601      	mov	r1, r0
 8005886:	4802      	ldr	r0, [pc, #8]	@ (8005890 <strtol+0x10>)
 8005888:	6800      	ldr	r0, [r0, #0]
 800588a:	f7ff bf7f 	b.w	800578c <_strtol_l.constprop.0>
 800588e:	bf00      	nop
 8005890:	2000000c 	.word	0x2000000c

08005894 <memset>:
 8005894:	4402      	add	r2, r0
 8005896:	4603      	mov	r3, r0
 8005898:	4293      	cmp	r3, r2
 800589a:	d100      	bne.n	800589e <memset+0xa>
 800589c:	4770      	bx	lr
 800589e:	f803 1b01 	strb.w	r1, [r3], #1
 80058a2:	e7f9      	b.n	8005898 <memset+0x4>

080058a4 <__errno>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	@ (80058ac <__errno+0x8>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4d0d      	ldr	r5, [pc, #52]	@ (80058e8 <__libc_init_array+0x38>)
 80058b4:	4c0d      	ldr	r4, [pc, #52]	@ (80058ec <__libc_init_array+0x3c>)
 80058b6:	1b64      	subs	r4, r4, r5
 80058b8:	10a4      	asrs	r4, r4, #2
 80058ba:	2600      	movs	r6, #0
 80058bc:	42a6      	cmp	r6, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	4d0b      	ldr	r5, [pc, #44]	@ (80058f0 <__libc_init_array+0x40>)
 80058c2:	4c0c      	ldr	r4, [pc, #48]	@ (80058f4 <__libc_init_array+0x44>)
 80058c4:	f000 f818 	bl	80058f8 <_init>
 80058c8:	1b64      	subs	r4, r4, r5
 80058ca:	10a4      	asrs	r4, r4, #2
 80058cc:	2600      	movs	r6, #0
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d8:	4798      	blx	r3
 80058da:	3601      	adds	r6, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e2:	4798      	blx	r3
 80058e4:	3601      	adds	r6, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	08005a5c 	.word	0x08005a5c
 80058ec:	08005a5c 	.word	0x08005a5c
 80058f0:	08005a5c 	.word	0x08005a5c
 80058f4:	08005a60 	.word	0x08005a60

080058f8 <_init>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr

08005904 <_fini>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr
